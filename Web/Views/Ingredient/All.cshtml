@model IngredientsViewModel
@using ViewModels.Ingredient
@using System.Numerics
@using Web.Controllers.Ingredient
@using Core.Models.Exercise
@using Web.Code.Extensions
@using Core.Models.User
@using Core.Models

@{
    ViewData[ViewData_Blank.Title] = "Ingredients";
}

<details class="alert alert-secondary mb-0" style="position:fixed;top:0;right:0;z-index:1;overflow:auto;max-height:100vh;">
    <summary class="cursor--pointer">@(Model.FormHasData ? "*" : "")Filter Ingredients</summary>

    <form asp-controller="@IngredientController.Name" asp-action="@nameof(IngredientController.All)" method="get" style="margin-top:1rem"
          onsubmit="submitButton.disabled=true;">
        <div style="margin-bottom:1ex;">
            <label asp-for="Name" class="control-label">@Html.DisplayNameFor(_ => Model.Name)</label>
            <input asp-for="Name" type="text" class="form-control" />
        </div>
        <div style="margin-bottom:1ex;">
            <label asp-for="Section" class="control-label">@Html.DisplayNameFor(_ => Model.Section)</label>
            <select asp-for="Section" class="form-control"
                    asp-items='@(EnumExtensions.GetValuesExcluding32(Section.None, Section.All, Section.Debug).AsSelectListItems32(EnumViewExtensions.EnumOrdering.Text).Prepend(new SelectListItem() { Text = "" }))'>
            </select>
        </div>
        <div class="row pt-1">
            <div class="col">
                <input type="submit" value="Apply" class="btn btn-secondary" name="submitButton" />
            </div>
            <div class="col-auto">
                <a class="btn btn-outline-secondary" asp-controller="@IngredientController.Name" asp-action="@nameof(IngredientController.All)">Clear</a>
            </div>
        </div>
    </form>
</details>


<div class="mt-4" style="display:flex;flex-flow:row wrap;gap:1ch;line-height:normal;">
    @foreach (var ingredient in Model.Ingredients.OrderBy(e => e.Name))
    {
        <div style="flex:1 0 min(calc(100% - 20px), 300px);padding:10px;position:relative;display:flex;flex-direction:column;justify-content:space-between;
        border-bottom:4px solid black;border-image-slice:1;outline:1px solid black;background-color:transparent;">

            @if (User != null)
            {
                @* Check min and max progression ranges so they don't ignore an exercise outside of their progression range. *@
                <small style="position:absolute;right:0;top:0;padding-inline:1ch;writing-mode:vertical-lr;">
                    <a class="allow-demo" target="_blank" href="/manageingredient">Manage</a>
                </small>
            }

            @* div for margin-collapse between text content and image. *@
            <div>
                @* min-height so the Manage link doesn't overlap the image. *@
                <div style="min-height:5ch;">
                    @* padding-inline-end so title and instruction text doesn't overlap with the Manage link. *@
                    <div style="padding-inline-end:1.1ch">
                        <h3 style="margin-block-start:0;margin-block-end:.4em;font-size:1.2em;">
                            <span style="text-decoration:underline;">@ingredient.Name</span>
                        </h3>


                        <div style="margin-block:.5em;font-size:x-small;"><b>Group</b>: @ingredient.Group.GetDisplayName32()</div>
                        <div style="margin-block:.5em;font-size:x-small;"><b>Allergens</b>: @ingredient.Allergens.GetDisplayName32()</div>
                        <div style="margin-block:.5em;font-size:x-small;"><b>Vitamins</b>: @ingredient.Vitamins.GetDisplayName32()</div>
                        <div style="margin-block:.5em;font-size:x-small;"><b>Minerals</b>: @ingredient.Minerals.GetDisplayName32()</div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
