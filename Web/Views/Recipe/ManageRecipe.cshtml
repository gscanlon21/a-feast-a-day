@model UserManageRecipeViewModel
@using System.Numerics
@using Core.Models.Recipe
@using Core.Consts
@using Web.Components

@{
    ViewData[ViewData_Blank.Title] = "Recipe";
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Recipe</h1>
        <h2 class="sub-heading ps-1"> @Model.Parameters.Section.GetSingleDisplayName(DisplayType.ShortName)</h2>
    </div>
    <partial name="_ValidationMessagePartial" model='new ValidationMessagePartialModel() { WasUpdated = Model.WasUpdated, GoBackOnSave = true }' />
</div>

@* User must have created the recipe to be able to edit it. *@
@if (Model.User.Id == Model.Recipe.UserId || Model.User.Features.HasFlag(Features.Admin))
{
    <div class="row gy-3">
        @if (Model.HasUserRecipe)
        {
            <div class="col-lg-6">
                @await Component.InvokeAsync(ManageRecipeViewComponent.Name, new { Model.User, Model.Recipe, Model.Parameters })
                @await Component.InvokeAsync(RecipeIngredientsViewComponent.Name, new { Model.User, Model.Recipe, Model.Parameters })
            </div>
        }

        <div class="col-lg-6">
            <h5 class="mb-1">Edit Recipe</h5>
            @await Component.InvokeAsync(UpsertRecipeViewComponent.Name, new { Model.User, Model.Recipe, Model.Parameters.Section })
        </div>
    </div>
}
else
{
    <div class="row gy-2">
        <div class="col-lg-6">
            @await Component.InvokeAsync(ManageRecipeViewComponent.Name, new { Model.User, Model.Recipe, Model.Parameters })
        </div>

        <div class="col-lg-6">
            @await Component.InvokeAsync(RecipeIngredientsViewComponent.Name, new { Model.User, Model.Recipe, Model.Parameters })
        </div>
    </div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" model='new ValidationScriptsPartialViewModel() { IsDemoUser = Model.User.IsDemoUser }' />
}
