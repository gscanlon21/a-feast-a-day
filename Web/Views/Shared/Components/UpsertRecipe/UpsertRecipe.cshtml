@model Web.Views.Shared.Components.UpsertRecipe.UpsertRecipeViewModel
@using Core.Models.Recipe
@using Core.Models.User
@using Web.Code.Extensions

<div class="alert alert-light shadow mb-3" role="alert">
    <form id="recipe-form" asp-controller="@UserController.Name" asp-action="@nameof(UserController.UpsertRecipe)" asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" method="post">
        <input asp-for="Recipe.Id" type="hidden" class="form-control" />

        <div class="form-group mb-3">
            <label asp-for="Recipe.Name" class="control-label">Name</label>
            <input asp-for="Recipe.Name" type="text" class="form-control" required="required" />
        </div>
        <div class="form-group mb-3">
            <label asp-for="Recipe.Notes" class="control-label">Notes</label>
            <input asp-for="Recipe.Notes" type="text" class="form-control" />
        </div>
        <div class="form-group form-check mb-3">
            <div>
                <span><label asp-for="Recipe.AdjustableServings" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.AdjustableServings)</label></span>
                <input class="form-check-input allow-demo" asp-for="Recipe.AdjustableServings" aria-describedby="fitness-help" />
            </div>
            <span asp-validation-for="Recipe.AdjustableServings" class="text-danger"></span>
            <div id="fitness-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Recipe.AdjustableServings)</div>
        </div>

        <div class="form-group mb-5 mt-3">
            <label class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.PrepTime)</label>
            <div><span asp-validation-for="Recipe.PrepTime" class="text-danger"></span></div>
            <div style="display:flex;column-gap:1ex;">
                <input id="@(Html.IdFor(_ => Model.Recipe.PrepTime))" type="number" asp-for="Recipe.PrepTime" style="width:6ch;height:fit-content;"
                        oninput="@Html.IdFor(_ => Model.Recipe.PrepTime)Input.value = this.valueAsNumber" />
                <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                    <input type="range" style="width:100%;" id="@Html.IdFor(_ => Model.Recipe.PrepTime)-input"
                            name="@Html.IdFor(_ => Model.Recipe.PrepTime)Input" list="hashmarks2"
                            min="0" max="60" step="5" value="@Model.Recipe.PrepTime"
                            oninput="@(Html.IdFor(_ => Model.Recipe.PrepTime)).value = this.valueAsNumber" />

                    <datalist id="hashmarks2" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                        <option value="0"></option>
                        <option value="15"></option>
                        <option value="30"></option>
                        <option value="45"></option>
                        <option value="60"></option>

                        <!-- These need to be separate from the <option> elements because those have their position attribute overridden (from absolute to static) on Firefox -->
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.PrepTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.PrepTime)-input').value = this.dataset.value" data-value="0" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(0% - .5ch)">0 min</span>
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.PrepTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.PrepTime)-input').value = this.dataset.value" data-value="15" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(25% - .5ch)">15 min</span>
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.PrepTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.PrepTime)-input').value = this.dataset.value" data-value="30" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(50% - .5ch)">30 min</span>
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.PrepTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.PrepTime)-input').value = this.dataset.value" data-value="45" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(75% - .5ch)">45 min</span>
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.PrepTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.PrepTime)-input').value = this.dataset.value" data-value="60" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(100% - .5ch)">60 min</span>
                    </datalist>
                </div>
            </div>
            <div id="@Html.IdFor(_ => Model.Recipe.PrepTime)-help" class="form-text"></div>
        </div>

        <div class="form-group mb-5 mt-3">
            <label class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.CookTime)</label>
            <div><span asp-validation-for="Recipe.CookTime" class="text-danger"></span></div>
            <div style="display:flex;column-gap:1ex;">
                <input id="@(Html.IdFor(_ => Model.Recipe.CookTime))" type="number" asp-for="Recipe.CookTime" style="width:6ch;height:fit-content;"
                        oninput="@Html.IdFor(_ => Model.Recipe.CookTime)Input.value = this.valueAsNumber" />
                <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                    <input type="range" style="width:100%;"
                            name="@Html.IdFor(_ => Model.Recipe.CookTime)Input" list="hashmarks3" id="@Html.IdFor(_ => Model.Recipe.CookTime)-input"
                            min="0" max="120" step="5" value="@Model.Recipe.CookTime"
                            oninput="@(Html.IdFor(_ => Model.Recipe.CookTime)).value = this.valueAsNumber" />

                    <datalist id="hashmarks3" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                        <option value="0"></option>
                        <option value="30"></option>
                        <option value="60"></option>
                        <option value="90"></option>
                        <option value="120"></option>

                        <!-- These need to be separate from the <option> elements because those have their position attribute overridden (from absolute to static) on Firefox -->
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.CookTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.CookTime)-input').value = this.dataset.value" data-value="0" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(0% - .5ch)">0 min</span>
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.CookTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.CookTime)-input').value = this.dataset.value" data-value="30" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(25% - .5ch)">30 min</span>
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.CookTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.CookTime)-input').value = this.dataset.value" data-value="60" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(50% - .5ch)">60 min</span>
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.CookTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.CookTime)-input').value = this.dataset.value" data-value="90" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(75% - .5ch)">90 min</span>
                        <span onclick="@(Html.IdFor(_ => Model.Recipe.CookTime)).value = document.getElementById('@Html.IdFor(_ => Model.Recipe.CookTime)-input').value = this.dataset.value" data-value="120" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(100% - .5ch)">120 min</span>
                    </datalist>
                </div>
            </div>
            <div id="@Html.IdFor(_ => Model.Recipe.CookTime)-help" class="form-text"></div>
        </div>

        <div class="form-group mb-3 mt-3 row">
            <div class="col">
                <label class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.Servings)</label>
                <div><span asp-validation-for="Recipe.Servings" class="text-danger"></span></div>
                <div style="display:flex;column-gap:1ex;">
                    <input id="@(Html.IdFor(_ => Model.Recipe.Servings))" type="number" asp-for="Recipe.Servings" style="width:6ch;height:fit-content;"
                           oninput="@Html.IdFor(_ => Model.Recipe.Servings)Input.value = this.valueAsNumber" />
                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                        <input type="range" style="width:100%;"
                               name="@Html.IdFor(_ => Model.Recipe.Servings)Input" list="hashmarks1" id="@Html.IdFor(_ => Model.Recipe.Servings)-input"
                               min="1" max="10" step="1" value="@Model.Recipe.Servings"
                               oninput="@(Html.IdFor(_ => Model.Recipe.Servings)).value = this.valueAsNumber" />

                        <datalist id="hashmarks1" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                            <option value="2"></option>
                            <option value="4"></option>
                            <option value="6"></option>
                            <option value="8"></option>
                            <option value="10"></option>

                            <!-- These need to be separate from the <option> elements because those have their position attribute overridden (from absolute to static) on Firefox -->
                            <span style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(14% - .5ch)">2</span>
                            <span style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(36% - .5ch)">4</span>
                            <span style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(58% - .5ch)">6</span>
                            <span style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(80% - .5ch)">8</span>
                            <span style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;right:-2.5ch">10</span>
                        </datalist>
                    </div>
                </div>
                <div id="@Html.IdFor(_ => Model.Recipe.Servings)-help" class="form-text"></div>
            </div>
            <div class="col-auto">
                <label asp-for="Recipe.Measure" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.Measure)</label>
                <select asp-for="Recipe.Measure" class="form-control" aria-describedby="measure-help"
                        asp-items="@(EnumExtensions.GetDisplayValues<Measure>().AsSelectListItems32())">
                </select>
                <span asp-validation-for="Recipe.Measure" class="text-danger"></span>
                <span id="measure-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Recipe.Measure)</span>
            </div>
        </div>
     
        <div class="form-group mb-3">
            <label asp-for="Recipe.SectionBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.Section)</label>
            <select asp-for="Recipe.SectionBinder" class="form-control overflow-auto" aria-describedby="verbosity-help" size="6"
                    asp-items="@(EnumExtensions.GetSingleValuesExcludingAny32(Section.Prep).AsSelectListItems32(EnumViewExtensions.EnumOrdering.Value))">
            </select>
            <span asp-validation-for="Recipe.SectionBinder" class="text-danger"></span>
            <div id="verbosity-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Recipe.Section)</div>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Recipe.EquipmentBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.Equipment)</label>
            <select asp-for="Recipe.EquipmentBinder" class="form-control overflow-auto" aria-describedby="rest-help" size="5"
                    asp-items="@(EnumExtensions.GetNotNoneValues32<Equipment>().AsSelectListItems32(EnumViewExtensions.EnumOrdering.Order))">
            </select>
            <span asp-validation-for="Recipe.EquipmentBinder" class="text-danger"></span>
            <div id="rest-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Recipe.Equipment)</div>
        </div>

        <div class="mb-3" >
            <b>Edit Ingredients</b>
            <div class="mt-1 ps-3">
                @for (int id = 0; id < Model.Recipe.RecipeIngredients.Count; id++)
                {
                    var userIngredient = Model.Recipe.RecipeIngredients[id];
                    <div id="custom-ingredient-@id" class="mb-4 custom-ingredient @(userIngredient.Hide ? "d-none" : "")" data-day="@id">
                        <input id="hide-ingredient-input-@id" type="hidden" asp-for="Recipe.RecipeIngredients[id].Hide" />
                        <input type="hidden" asp-for="Recipe.RecipeIngredients[id].Order" value="@id" />

                        <div class="form-group row">
                            <div class="col-auto">
                                <label class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.RecipeIngredients[id].QuantityNumerator)</label>
                                <div><span asp-validation-for="Recipe.RecipeIngredients[id].QuantityNumerator" class="text-danger"></span></div>
                                <div><span asp-validation-for="Recipe.RecipeIngredients[id].QuantityDenominator" class="text-danger"></span></div>
                                <div class="row gx-2">
                                    <div class="col-auto">
                                        <input id="@(Html.IdFor(_ => Model.Recipe.RecipeIngredients[id].QuantityNumerator))" type="number" asp-for="Recipe.RecipeIngredients[id].QuantityNumerator" style="width:5ch;height:fit-content;" />
                                    </div>
                                    <div class="col-auto px-0">
                                        <span>/</span>
                                    </div>
                                    <div class="col-auto">
                                        <input id="@(Html.IdFor(_ => Model.Recipe.RecipeIngredients[id].QuantityDenominator))" type="number" asp-for="Recipe.RecipeIngredients[id].QuantityDenominator" style="width:5ch;height:fit-content;" />
                                    </div>
                                </div>
                                <div id="@Html.IdFor(_ => Model.Recipe.RecipeIngredients[id].QuantityNumerator)-help" class="form-text"></div>
                            </div>

                            <div class="col">
                                <label asp-for="Recipe.RecipeIngredients[id].Measure" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.RecipeIngredients[id].Measure)</label>
                                <select asp-for="Recipe.RecipeIngredients[id].Measure" class="form-control" aria-describedby="measure-help"
                                        asp-items="@(EnumExtensions.GetValuesExcluding32(Measure.Percent, Measure.IU).AsSelectListItems32())">
                                </select>
                                <span asp-validation-for="Recipe.RecipeIngredients[id].Measure" class="text-danger"></span>
                                <span id="measure-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Recipe.RecipeIngredients[id].Measure)</span>
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="col">
                                <label asp-for="Recipe.RecipeIngredients[id].IngredientId" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.RecipeIngredients[id].IngredientId)</label>
                                <select asp-for="Recipe.RecipeIngredients[id].IngredientId" class="form-control searchable" aria-describedby="ingredient-help"
                                        asp-items="@(Model.Ingredients.Select(i => new SelectListItem() { Text = i.Name, Value = i.Id.ToString() }).Prepend(new SelectListItem()))">
                                </select>
                                <span asp-validation-for="Recipe.RecipeIngredients[id].IngredientId" class="text-danger"></span>
                                <span id="ingredient-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Recipe.RecipeIngredients[id].IngredientId)</span>
                            </div>

                            <div class="col">
                                <label asp-for="Recipe.RecipeIngredients[id].IngredientRecipeId" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.RecipeIngredients[id].IngredientRecipeId)</label>
                                <select asp-for="Recipe.RecipeIngredients[id].IngredientRecipeId" class="form-control searchable" aria-describedby="ingredient-recipe-help"
                                        asp-items="@(Model.Recipes.Select(i => new SelectListItem() { Text = i.Name, Value = i.Id.ToString() }).Prepend(new SelectListItem()))">
                                </select>
                                <span asp-validation-for="Recipe.RecipeIngredients[id].IngredientRecipeId" class="text-danger"></span>
                                <span id="ingredient-recipe-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Recipe.RecipeIngredients[id].IngredientRecipeId)</span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label asp-for="Recipe.RecipeIngredients[id].Attributes" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.RecipeIngredients[id].Attributes)</label>
                            <input asp-for="Recipe.RecipeIngredients[id].Attributes" type="text" placeholder=", diced, minced, thinly chopped..." class="form-control" />

                            <div class="form-check mt-1">
                                <label asp-for="Recipe.RecipeIngredients[id].Optional" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.RecipeIngredients[id].Optional)</label>
                                <input class="form-check-input" asp-for="Recipe.RecipeIngredients[id].Optional" aria-describedby="synthetic-help" />
                                <span asp-validation-for="Recipe.RecipeIngredients[id].Optional" class="text-danger"></span>
                                <div id="synthetic-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Recipe.RecipeIngredients[id].Optional)</div>
                            </div>
                        </div>
                    </div>
                }
                <div class="btn-group">
                    <button id="custom-ingredient-add-button" type="button" class="btn btn-outline-primary">Add</button>
                    <button id="custom-ingredient-remove-button" type="button" class="btn btn-outline-secondary">Remove</button>
                </div>
            </div>

            <script defer="defer">
                document.getElementById('custom-ingredient-add-button').addEventListener('click', (e) => {
                    const ingredients = Array.from(document.getElementsByClassName('custom-ingredient'));
                    for (const ingredient of ingredients) {
                        if (ingredient.classList.contains('d-none')) {
                            // Unhide the ingredient
                            ingredient.classList.remove('d-none');
                            document.getElementById('hide-ingredient-input-' + ingredient.dataset.day).value = 'False';
                            break;
                        }
                    }

                    // Always show the remove button after adding a ingredient
                    document.getElementById('custom-ingredient-remove-button').classList.remove('d-none');

                    // Hide the add button if we have already shown all ingredients
                    if (ingredients.every(f => !f.classList.contains('d-none'))) {
                        e.currentTarget.classList.add('d-none');
                    }
                });

                document.getElementById('custom-ingredient-remove-button').addEventListener('click', (e) => {
                    const ingredients = Array.from(document.getElementsByClassName('custom-ingredient'));
                    for (const ingredient of ingredients.reverse()) {
                        if (!ingredient.classList.contains('d-none')) {
                            // Hide the ingredient
                            ingredient.classList.add('d-none');
                            document.getElementById('hide-ingredient-input-' + ingredient.dataset.day).value = 'True';
                            break;
                        }
                    }

                    // Always show the add button after removing a ingredient
                    document.getElementById('custom-ingredient-add-button').classList.remove('d-none');

                    // Hide the remove button when there is one remaining ingredient
                    if (ingredients.filter(f => !f.classList.contains('d-none')).length === 1) {
                        e.currentTarget.classList.add('d-none');
                    }
                });
            </script>
        </div>

        <div class="mb-3">
            <b>Edit Instructions</b>
            <div class="mt-1 ps-3">
                @for (int id = 0; id < Model.Recipe.Instructions.Count; id++)
                {
                    var userInstruction = Model.Recipe.Instructions[id];
                    <div id="custom-instruction-@id" class="custom-instruction @(userInstruction.Hide ? "d-none" : "")" data-day="@id">
                        <div class="row">
                            <input id="hide-instruction-input-@id" type="hidden" asp-for="Recipe.Instructions[id].Hide" />
                            <input type="hidden" asp-for="Recipe.Instructions[id].Order" value="@id" />

                            <div class="form-group mb-3 col" style="min-width:200px;">
                                <label asp-for="Recipe.Instructions[id].Name" class="control-label">Step @(id + 1)</label>
                                <input asp-for="Recipe.Instructions[id].Name" type="text" class="form-control" required="required" />
                            </div>
                        </div>
                    </div>
                }
                <div class="btn-group">
                    <button id="custom-instruction-add-button" type="button" class="btn btn-outline-primary">Add</button>
                    <button id="custom-instruction-remove-button" type="button" class="btn btn-outline-secondary">Remove</button>
                </div>
            </div>

            <script defer="defer">
                document.getElementById('custom-instruction-add-button').addEventListener('click', (e) => {
                    const instructions = Array.from(document.getElementsByClassName('custom-instruction'));
                    for (const instruction of instructions) {
                        if (instruction.classList.contains('d-none')) {
                            // Unhide the instruction
                            instruction.classList.remove('d-none');
                            document.getElementById('hide-instruction-input-' + instruction.dataset.day).value = 'False';
                            break;
                        }
                    }

                    // Always show the remove button after adding a instruction
                    document.getElementById('custom-instruction-remove-button').classList.remove('d-none');

                    // Hide the add button if we have already shown all instructions
                    if (instructions.every(f => !f.classList.contains('d-none'))) {
                        e.currentTarget.classList.add('d-none');
                    }
                });

                document.getElementById('custom-instruction-remove-button').addEventListener('click', (e) => {
                    const instructions = Array.from(document.getElementsByClassName('custom-instruction'));
                    for (const instruction of instructions.reverse()) {
                        if (!instruction.classList.contains('d-none')) {
                            // Hide the instruction
                            instruction.classList.add('d-none');
                            document.getElementById('hide-instruction-input-' + instruction.dataset.day).value = 'True';
                            break;
                        }
                    }

                    // Always show the add button after removing a instruction
                    document.getElementById('custom-instruction-add-button').classList.remove('d-none');

                    // Hide the remove button when there is one remaining instruction
                    if (instructions.filter(f => !f.classList.contains('d-none')).length === 1) {
                        e.currentTarget.classList.add('d-none');
                    }
                });
            </script>
        </div>

        <div class="form-group form-check mb-3">
            <label asp-for="Recipe.Enabled" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe.Enabled)</label>
            <input class="form-check-input" asp-for="Recipe.Enabled" aria-describedby="disabled-help" />
            <span asp-validation-for="Recipe.Enabled" class="text-danger"></span>
            <div id="disabled-help" class="form-text">
                @Html.DisplayDescriptionFor(_ => Model.Recipe.Enabled)
                @if (!String.IsNullOrWhiteSpace(Model.Recipe.DisabledReason))
                {
                    <div><b>Disabled Reason</b> - @Model.Recipe.DisabledReason</div>
                }
            </div>
        </div>
    </form>

    <div class="row form-group justify-content-end gy-2">
        <div class="col">
            <input type="submit" value="Save" class="btn btn-secondary" form="recipe-form" />
        </div>
        @if (Model.Recipe.Id != default)
        {
            <div class="col-auto">
                <form id="delete-form" asp-controller="@UserController.Name" asp-action="@nameof(UserController.RemoveRecipe)" asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" name="RecipeId" asp-for="@Model.Recipe.Id" />

                    <input type="submit" value="Delete" class="btn btn-outline-danger" form="delete-form" />
                </form>
            </div>
        }
        else
        {
            <div class="col-auto">
                @* TODO *@
                <form id="import-form" asp-controller="@UserController.Name" asp-action="@nameof(UserController.UpsertRecipe)" asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="btn-group" role="group" aria-label="Basic example">
                        <input id="file-input" class="btn btn-outline-secondary" style="width:27ch;" disabled="disabled" type="file" name="Recipe" />
                        <input type="submit" value="Import" class="btn btn-outline-secondary" form="import-form" disabled="disabled" />
                    </div>
                </form>
            </div>
        }
    </div>
</div>
