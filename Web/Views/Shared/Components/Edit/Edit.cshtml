@model UserEditViewModel
@using System.Numerics
@using Core.Models.Recipe
@using Core.Models.User
@using Core.Consts
@using Core.Models.Newsletter
@using Data.Entities.User
@using Web.Code.Extensions

<div id="edit" class="row gy-2">
    <div class="col-lg-6">
        <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.Edit)" method="post"
              class="alert alert-light shadow">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Token" />
            <input type="hidden" asp-for="Email" />

            @if (!Model.User.IsDemoUser) 
            {
                <div class="form-group mb-3">
                    <label for="disabled-email" class="control-label">@Html.DisplayNameFor(_ => Model.Email)</label>
                    <input id="disabled-email" value="@Model.Email" class="form-control" disabled="disabled" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
            }

            <div class="form-group mb-3">
                <label asp-for="SendDay" class="control-label">@Html.DisplayNameFor(_ => Model.SendDay)</label>
                <select asp-for="SendDay" class="form-control overflow-auto" aria-describedby="rest-help"
                        asp-items="@(Enum.GetValues<DayOfWeek>().AsSelectListItems())">
                </select>
                <span asp-validation-for="SendDay" class="text-danger"></span>
                <div id="rest-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.SendDay)</div>
            </div>

            <div class="form-group mb-3">
                <label asp-for="MaxIngredients" class="control-label">@Html.DisplayNameFor(_ => Model.MaxIngredients)</label>
                <select asp-for="MaxIngredients" class="form-control" aria-describedby="ingredients-help"
                        asp-items="@(Enumerable.Range(4, 6).Select(h => new SelectListItem() { Text = $"{h}", Value = $"{h}" }).Prepend(new SelectListItem()))">
                </select>
                <span asp-validation-for="MaxIngredients" class="text-danger"></span>
                <div id="ingredients-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.MaxIngredients)</div>
            </div>

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout callout">
                    Customize weekly servings.
                </div>
            }
            <div class="form-group mb-3">
                <details class="mb-3" @(Model.WasUpdated == false ? "open='open'" : "")>
                    <summary><b>Edit @Html.DisplayNameFor(_ => Model.UserSections)</b></summary>

                    <div class="mt-1 ps-3">
                        @for (var i = 0; i < Model.UserSections.Count; i++)
                        {
                            <input type="hidden" asp-for="UserSections[i].UserId" />
                            <input type="hidden" asp-for="UserSections[i].Section" />
                            <div class="mb-3">
                                <div><b>@Model.UserSections[i].Section.GetDisplayName2()</b></div>

                                <div class="mb-1 form-group">
                                    <label asp-for="UserSections[i].Weight" class="control-label">@Html.DisplayNameFor(_ => Model.UserSections[i].Weight)</label>
                                    <div style="display:flex;column-gap:1ch;">
                                        <output name="mobilityMusclesOutput@(i)" for="@Html.IdFor(_ => Model.UserSections[i])">@Model.UserSections[i].Weight</output>
                                        <div style="display:flex;width:100%;">
                                            <input asp-for="UserSections[i].Weight" type="range" style="width:100%;" aria-describedby="refresh-functional-help"
                                                   min="@UserConsts.SectionWeightMin" max="@UserConsts.SectionWeightMax"
                                                   oninput="mobilityMusclesOutput@(i).value = this.valueAsNumber" list="mobilityMusclesList@(i)" />
                                            <datalist id="mobilityMusclesList@(i)">
                                                <option value="@(UserSection.DefaultWeight.TryGetValue(Model.UserSections[i].Section, out int countTmp) ? countTmp : 0)"></option>
                                            </datalist>
                                        </div>
                                    </div>
                                    <span asp-validation-for="UserSections[i].Weight" class="text-danger"></span>
                                    <div id="refresh-functional-help" class="form-text">
                                        <p>@Html.DisplayDescriptionFor(_ => Model.UserSections[i].Weight)</p>
                                    </div>
                                </div>

                                <div class="mb-1">
                                    <div class="form-group mb-3">
                                        <label asp-for="UserSections[i].AtLeastXNutrientsPerRecipe" class="control-label">@Html.DisplayNameFor(_ => Model.UserSections[i].AtLeastXNutrientsPerRecipe)</label>
                                        <div style="display:flex;column-gap:1ex;">
                                            <output name="OutputAtLeastXNutrientsPerRecipe@(i)" for="@Html.IdFor(_ => Model.UserSections[i].AtLeastXNutrientsPerRecipe)">@Model.UserSections[i].AtLeastXNutrientsPerRecipe</output>
                                            <div style="display:flex;width:100%;">
                                                <input asp-for="UserSections[i].AtLeastXNutrientsPerRecipe" type="range" style="width:100%;" aria-describedby="user-nutrients-help@(i)"
                                                       step="1" min="@UserConsts.AtLeastXNutrientsPerRecipeMin" max="@UserConsts.AtLeastXNutrientsPerRecipeMax"
                                                       oninput="OutputAtLeastXNutrientsPerRecipe@(i).value = this.valueAsNumber" list="ListAtLeastXNutrientsPerRecipe@(i)" />
                                                <datalist id="ListAtLeastXNutrientsPerRecipe@(i)">
                                                    <option value="@UserConsts.AtLeastXNutrientsPerRecipeDefault"></option>
                                                </datalist>
                                            </div>
                                        </div>
                                        <span asp-validation-for="UserSections[i].AtLeastXNutrientsPerRecipe" class="text-danger"></span>
                                        <div id="user-nutrients-help@(i)" class="form-text">
                                            @Html.DisplayDescriptionFor(_ => Model.UserSections[i].AtLeastXNutrientsPerRecipe)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </details>
                <span asp-validation-for="UserSections" class="text-danger"></span>
                <div id="user-sections-help" class="form-text">
                    @Html.DisplayDescriptionFor(_ => Model.UserSections)
                </div>
            </div>

            <div class="form-group mb-3">
                <details class="mb-3" @((Model.WasUpdated == false || Model.UserFamilies.Count(f => f.Person != Person.None) == 0) ? "open='open'" : "")>
                    <summary><b>Edit Family Members</b> (@Model.UserFamilies.Count(f => !f.Hide))</summary>

                    <div class="mt-2 ps-3">
                        @for (int id = 0; id < Model.UserFamilies.Count; id++)
                        {
                            var userInstruction = Model.UserFamilies[id];
                            <div id="custom-family-@id" class="custom-family @(userInstruction.Hide ? "d-none" : "")" data-day="@id">
                                <div class="row">
                                    <input id="hide-family-input-@id" type="hidden" asp-for="UserFamilies[id].Hide" />
                                    <input type="hidden" asp-for="UserFamilies[id].UserId" value="@Model.User.Id" />

                                    <div class="form-group mb-2">
                                        <label asp-for="UserFamilies[id].Person" class="control-label">@Html.DisplayNameFor(_ => Model.UserFamilies[id].Person)</label>
                                        <select asp-for="UserFamilies[id].Person" class="form-control overflow-auto" aria-describedby="footnote-help"
                                                asp-items='@(EnumExtensions.GetDisplayValues<Person>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Value))'>
                                        </select>
                                        <span asp-validation-for="UserFamilies[id].Person" class="text-danger"></span>
                                        <div id="footnote-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserFamilies[id].Person)</div>
                                    </div>

                                    <div class="form-group mb-2">
                                        <label asp-for="UserFamilies[id].Weight" class="control-label">@Html.DisplayNameFor(_ => Model.UserFamilies[id].Weight)</label>
                                        <div style="display:flex;column-gap:1ex;">
                                            <output name="OutputFamilyWeight@(id)" for="@Html.IdFor(_ => Model.UserFamilies[id].Weight)">@Model.UserFamilies[id].Weight</output>
                                            <div style="display:flex;width:100%;">
                                                <input asp-for="UserFamilies[id].Weight" type="range" style="width:100%;" aria-describedby="refresh-functional-help"
                                                       step="1" min="@UserFamily.Consts.WeightMin" max="@UserFamily.Consts.WeightMax"
                                                       oninput="OutputFamilyWeight@(id).value = this.valueAsNumber" list="ListFamilyWeight@(id)" />
                                                <datalist id="ListFamilyWeight@(id)">
                                                    <option value="3"></option>
                                                </datalist>
                                            </div>
                                        </div>
                                        <span asp-validation-for="UserFamilies[id].Weight" class="text-danger"></span>
                                        <div id="refresh-functional-help" class="form-text">
                                            @Html.DisplayDescriptionFor(_ => Model.UserFamilies[id].Weight)
                                        </div>
                                    </div>

                                    <div class="form-group mb-3">
                                        <label asp-for="UserFamilies[id].CaloriesPerDay" class="control-label">@Html.DisplayNameFor(_ => Model.UserFamilies[id].CaloriesPerDay)</label>
                                        <div style="display:flex;column-gap:1ex;">
                                            <output name="OutputFamilyCalories@(id)" for="@Html.IdFor(_ => Model.UserFamilies[id].CaloriesPerDay)">@Model.UserFamilies[id].CaloriesPerDay</output>
                                            <div style="display:flex;width:100%;">
                                                <input asp-for="UserFamilies[id].CaloriesPerDay" type="range" style="width:100%;" aria-describedby="refresh-functional-help"
                                                       step="50" min="@UserFamily.Consts.CaloriesPerDayMin" max="@UserFamily.Consts.CaloriesPerDayMax"
                                                       oninput="OutputFamilyCalories@(id).value = this.valueAsNumber" list="ListFamilyCalories@(id)" />
                                                <datalist id="ListFamilyCalories@(id)">
                                                    <option value="3"></option>
                                                </datalist>
                                            </div>
                                        </div>
                                        <span asp-validation-for="UserFamilies[id].CaloriesPerDay" class="text-danger"></span>
                                        <div id="refresh-functional-help" class="form-text">
                                            @Html.DisplayDescriptionFor(_ => Model.UserFamilies[id].CaloriesPerDay)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="btn-group">
                            <button id="custom-family-add-button" type="button" class="btn btn-outline-primary">Add</button>
                            <button id="custom-family-remove-button" type="button" class="btn btn-outline-secondary">Remove</button>
                        </div>
                    </div>

                    <script defer="defer">
                        document.getElementById('custom-family-add-button').addEventListener('click', (e) => {
                            const instructions = Array.from(document.getElementsByClassName('custom-family'));
                            for (const instruction of instructions) {
                                if (instruction.classList.contains('d-none')) {
                                    // Unhide the instruction
                                    instruction.classList.remove('d-none');
                                    document.getElementById('hide-family-input-' + instruction.dataset.day).value = 'False';
                                    break;
                                }
                            }

                            // Always show the remove button after adding a instruction
                            document.getElementById('custom-family-remove-button').classList.remove('d-none');

                            // Hide the add button if we have already shown all instructions
                            if (instructions.every(f => !f.classList.contains('d-none'))) {
                                e.currentTarget.classList.add('d-none');
                            }
                        });

                        document.getElementById('custom-family-remove-button').addEventListener('click', (e) => {
                            const instructions = Array.from(document.getElementsByClassName('custom-family'));
                            for (const instruction of instructions.reverse()) {
                                if (!instruction.classList.contains('d-none')) {
                                    // Hide the instruction
                                    instruction.classList.add('d-none');
                                    document.getElementById('hide-family-input-' + instruction.dataset.day).value = 'True';
                                    break;
                                }
                            }

                            // Always show the add button after removing a instruction
                            document.getElementById('custom-family-add-button').classList.remove('d-none');

                            // Hide the remove button when there is one remaining instruction
                            if (instructions.filter(f => !f.classList.contains('d-none')).length === 1) {
                                e.currentTarget.classList.add('d-none');
                            }
                        });
                    </script>
                </details>
                <span asp-validation-for="UserFamilies" class="text-danger"></span>
                <div id="user-families-help" class="form-text">
                    @Html.DisplayDescriptionFor(_ => Model.UserFamilies)
                </div>
            </div>

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout">
                    Recipes are chosen from equipment you have access to.
                </div>
            }
            <div class="form-group mb-3">
                <label asp-for="EquipmentBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Equipment)</label>
                <select asp-for="EquipmentBinder" class="form-control overflow-auto" aria-describedby="equipment-help" size="5"
                        asp-items="@(EnumExtensions.GetSingleOrDoubleValues<Equipment>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Order))">
                </select>
                <span asp-validation-for="EquipmentBinder" class="text-danger"></span>
                <details id="equipment-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.Equipment)</summary>

                    <div class="mt-1">
                        <span>Recipes that require equipment you don't have will be excluded from your meal plan.</span>
                    </div>
                </details>
            </div>

            <div class="form-group mb-3">
                <label asp-for="AllergenBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Allergens)</label>
                <select asp-for="AllergenBinder" class="form-control overflow-auto" aria-describedby="allergy-help" size="5"
                        asp-items="@(EnumExtensions.GetSingleValues<Allergens>().AsSelectListItems())">
                </select>
                <span asp-validation-for="AllergenBinder" class="text-danger"></span>
                <div id="allergy-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Allergens)</div>
            </div>

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout">
                    Optional health and cooking tips.
                </div>
            }

            <div class="form-group mb-3">
                <label asp-for="FootnoteTypeBinder" class="control-label">@Html.DisplayNameFor(_ => Model.FootnoteType)</label>
                <select asp-for="FootnoteTypeBinder" class="form-control overflow-auto" aria-describedby="footnote-help" size="5"
                        asp-items='@(EnumExtensions.GetSingleValues<FootnoteType>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Text))'>
                </select>
                <span asp-validation-for="FootnoteTypeBinder" class="text-danger"></span>
                <div id="footnote-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.FootnoteType)</div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="VerbosityBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Verbosity)</label>
                <select asp-for="VerbosityBinder" class="form-control overflow-auto" aria-describedby="verbosity-help" size="5"
                        asp-items="@(EnumExtensions.GetDisplayValues<Verbosity>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Text))">
                </select>
                <span asp-validation-for="VerbosityBinder" class="text-danger"></span>
                <div id="verbosity-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Verbosity)</div>
            </div>

            <div class="form-group mb-3">
                <label asp-for="SendHour" class="control-label">@Html.DisplayNameFor(_ => Model.SendHour)</label>
                <select asp-for="SendHour" class="form-control" aria-describedby="time-help"
                        asp-items="@(Enumerable.Range(0, 24).Select(h => new SelectListItem() { Text = $"{h}", Value = $"{h}" }))">
                </select>
                <span asp-validation-for="SendHour" class="text-danger"></span>
                <details id="time-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.SendHour)</summary>

                    <div class="mt-1">
                        <span>Your time zone is <span id="utc-offset"></span> hours <span id="behind-ahead"></span> UTC.</span>
                    </div>
                    <script defer="defer">
                        const utcOffset = new Date().getTimezoneOffset() / -60;
                        document.getElementById('utc-offset').innerText = Math.abs(utcOffset);
                        document.getElementById('behind-ahead').innerText = utcOffset < 0 ? "behind" : "ahead of";
                    </script>
                </details>
            </div>

            <div class="form-group form-check mb-3">
                <label asp-for="NewsletterEnabled" class="control-label">@Html.DisplayNameFor(_ => Model.NewsletterEnabled)</label>
                <input class="form-check-input" asp-for="NewsletterEnabled" aria-describedby="disabled-help" />
                <span asp-validation-for="NewsletterEnabled" class="text-danger"></span>
                <div id="disabled-help" class="form-text">
                    @Html.DisplayDescriptionFor(_ => Model.NewsletterEnabled)
                    @if (!String.IsNullOrWhiteSpace(Model.NewsletterDisabledReason))
                    {
                        <div><b>Disabled Reason</b> - @Model.NewsletterDisabledReason</div>
                    }
                </div>
            </div>

            <div class="row form-group">
                <div class="col">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
                <div class="col-auto">
                    <a class="btn btn-link text-muted hover" href="@Url.ActionLink(nameof(UserController.Delete), UserController.Name, new { Model.Email, Model.Token }, Uri.UriSchemeHttps)">Delete Account</a>
                </div>
            </div>
        </form>
      
        @await Component.InvokeAsync(AdvancedViewComponent.Name, new { Model.User, Model.Token })

        <details class="mb-25">
            <summary class="mb-1 h5">New Recipe</summary>

            @await Component.InvokeAsync(UpsertRecipeViewComponent.Name, new { Model.User, Model.Recipe })
        </details>

        <details class="mb-25">
            <summary class="mb-1 h5">New Ingredient</summary>

            @await Component.InvokeAsync(UpsertIngredientViewComponent.Name, new { Model.User })
        </details>
    </div>

    <div id="info" class="col">
        @await Component.InvokeAsync(ConfirmationViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(UnsupportedClientViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(CurrentFeastViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(NextFeastViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(PastFeastsViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(NutrientViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(GeneticsViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(MicrobiomeViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(TokenViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(BackupRestoreViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(FootnoteViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(RecipesViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(IngredientsViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(IgnoredRecipesViewComponent.Name, new { Model.User, Model.Token })
    </div>
</div>