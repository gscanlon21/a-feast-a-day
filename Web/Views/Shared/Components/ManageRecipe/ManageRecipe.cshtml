@model Views.Shared.Components.ManageRecipe.ManageRecipeViewModel
@using System.Numerics
@using Core.Models.Recipe
@using Core.Consts

<h6 class="mb-1">Recipe - @Model.Parameters.Section.GetSingleDisplayName(DisplayType.ShortName)</h6>
<div class="alert alert-light shadow mb-0">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <form id="skip-form" asp-controller="@RecipeController.Name" asp-action="@nameof(RecipeController.SkipRecipe)" method="post"
          asp-route-email="@Model.Parameters.Email" asp-route-token="@Model.Parameters.Token" asp-route-recipeId="@Model.Parameters.RecipeId" asp-route-section="@Model.Parameters.Section">
    </form>
    <form id="ignore-form" asp-controller="@RecipeController.Name" asp-action="@nameof(RecipeController.IgnoreRecipe)" method="post"
          asp-route-email="@Model.Parameters.Email" asp-route-token="@Model.Parameters.Token" asp-route-recipeId="@Model.Parameters.RecipeId" asp-route-section="@Model.Parameters.Section">
    </form>

    <div class="form-group mb-3">
        <label for="recipe-name" class="control-label">@Html.DisplayNameFor(_ => Model.Recipe)</label>
        <div class="input-group">
            <textarea id="recipe-name" class="form-control" disabled="disabled" aria-describedby="recipe-help" rows="1">@Model.Recipe.Recipe.Name</textarea>
            <input type="submit" form="skip-form" value="@(Model.UserRecipe.IgnoreUntil.HasValue && Model.UserRecipe.IgnoreUntil != DateOnly.MaxValue ? "Skipped" : "Skip")" class="btn btn-outline-secondary" @(Model.User.IsDemoUser ? "disabled='disabled'" : "") />
            <input type="submit" form="ignore-form" value="@(Model.UserRecipe.IgnoreUntil.HasValue && Model.UserRecipe.IgnoreUntil == DateOnly.MaxValue ? "Ignored" : "Ignore")" class="btn btn-outline-secondary" @(Model.User.IsDemoUser ? "disabled='disabled'" : "") />
        </div>
        <span asp-validation-for="Recipe" class="text-danger"></span>
        <div id="recipe-help" class="form-text">
            @Html.DisplayDescriptionFor(_ => Model.Recipe)
        </div>
    </div>
    
    <form asp-controller="@RecipeController.Name" class="row mb-3" asp-action="@nameof(RecipeController.RefreshRecipe)" method="post"
          asp-route-email="@Model.Parameters.Email" asp-route-token="@Model.Parameters.Token" asp-route-recipeId="@Model.Parameters.RecipeId" asp-route-section="@Model.Parameters.Section">

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group">
            <label for="exercise-date" class="control-label">@Html.DisplayNameFor(_ => Model.UserRecipe)</label>
            <div class="input-group">
                <input type="text" id="exercise-date" class="form-control" disabled="disabled" aria-describedby="exercise-date-help" rows="1" value="@((Model.UserRecipe.RefreshAfter ?? Model.UserRecipe.LastSeen).ToString("O"))" />
                <input type="submit" value="Refresh" class="btn btn-outline-secondary allow-demo" />
            </div>

            <span asp-validation-for="UserRecipe" class="text-danger"></span>
            <div id="exercise-date-help" class="form-text">
                @Html.DisplayDescriptionFor(_ => Model.UserRecipe)
            </div>
        </div>
    </form>

    <form asp-controller="@RecipeController.Name" asp-action="@nameof(RecipeController.LogRecipe)" method="post" class="mb-4"
          asp-route-email="@Model.Parameters.Email" asp-route-token="@Model.Parameters.Token" asp-route-recipeId="@Model.Parameters.RecipeId" asp-route-section="@Model.Parameters.Section">

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group mb-3 mt-3">
            <label for="Notes" class="control-label">@Html.DisplayNameFor(_ => Model.Notes)</label>
            <input type="text" asp-for="Notes" class="form-control" aria-describedby="exercise-notes-help" rows="1" value="@Model.Notes" />
            <span asp-validation-for="Notes" class="text-danger"></span>
        </div>

        @if (Model.User.IsDemoUser)
        {
            <div class="alert alert-info callout">
                Customize how long you want to see exercises before they refresh.
            </div>
        }

        @if (Model.Parameters.Section != Section.Prep) 
        {
            <div class="form-group mb-3 mt-3">
                <label asp-for="LagRefreshXWeeks" class="control-label">@Html.DisplayNameFor(_ => Model.LagRefreshXWeeks)</label>
                <div style="display:flex;column-gap:1ex;">
                    <output name="refreshFunctionalOutput" for="@Html.IdFor(_ => Model.LagRefreshXWeeks)">@Model.LagRefreshXWeeks</output>
                    <div style="display:flex;width:100%;">
                        <input asp-for="LagRefreshXWeeks" type="range" style="width:100%;" aria-describedby="refresh-functional-help"
                               min="@UserConsts.LagRefreshXWeeksMin" max="@UserConsts.LagRefreshXWeeksMax"
                               oninput="refreshFunctionalOutput.value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="LagRefreshXWeeks" class="text-danger"></span>
                <details id="refresh-functional-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.LagRefreshXWeeks)</summary>

                    <div class="mt-1">
                        <span>The Weekly Nutritional Targets feature takes precedence over this.</span>
                    </div>
                </details>
            </div>

            <div class="form-group mb-3 mt-3">
                <label asp-for="PadRefreshXWeeks" class="control-label">@Html.DisplayNameFor(_ => Model.PadRefreshXWeeks)</label>
                <div style="display:flex;column-gap:1ex;">
                    <output name="delayFunctionalOutput" for="@Html.IdFor(_ => Model.PadRefreshXWeeks)">@Model.PadRefreshXWeeks</output>
                    <div style="display:flex;width:100%;">
                        <input asp-for="PadRefreshXWeeks" type="range" style="width:100%;" aria-describedby="delay-functional-help"
                               min="@UserConsts.PadRefreshXWeeksMin" max="@UserConsts.PadRefreshXWeeksMax"
                               oninput="delayFunctionalOutput.value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="PadRefreshXWeeks" class="text-danger"></span>
                <details id="delay-functional-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.PadRefreshXWeeks)</summary>

                    <div class="mt-1">
                        <span>This may not apply if there are no other recipes available.</span>
                    </div>
                </details>
            </div>
        }
        else 
        {
            <input asp-for="LagRefreshXWeeks" type="hidden" />
            <input asp-for="PadRefreshXWeeks" type="hidden" />
        }

        @if (Model.Recipe.Recipe.AdjustableServings)
        {
            <div class="form-group mb-3 mt-3">
                <label asp-for="Servings" class="control-label">@Html.DisplayNameFor(_ => Model.Servings)</label>
                <div style="display:flex;column-gap:1ex;">
                    <output name="scaleOutput" for="@Html.IdFor(_ => Model.Servings)">@Model.Servings</output>
                    <div style="display:flex;width:100%;">
                        <input asp-for="Servings" type="range" style="width:100%;" aria-describedby="scale-help"
                               min="@RecipeConsts.ServingsMin" max="@RecipeConsts.ServingsMax" step="@RecipeConsts.ServingsStep"
                               oninput="scaleOutput.value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="Servings" class="text-danger"></span>
                <div id="scale-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Servings)</div>
            </div>
        }
        else
        {
            <input asp-for="Servings" type="hidden" value="@Model.Recipe.Recipe.Servings" />
        }

        <div class="form-group">
            <input type="submit" value="Save" class="btn btn-primary allow-demo" />
        </div>
    </form>

    <component type="typeof(Microsoft.AspNetCore.Components.CascadingValue<Core.Dtos.User.UserNewsletterDto?>)" render-mode="Static" param-Value="null">
        <component type="typeof(Lib.Pages.Shared.Recipe._Recipe)" render-mode="Static" param-Model='Model.Recipe' param-Verbosity="Model.RecipeVerbosity" />
    </component>
</div>
