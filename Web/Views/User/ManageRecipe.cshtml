@model UserManageRecipeViewModel
@using System.Numerics
@using Core.Models.Recipe
@using Core.Consts
@using Web.Components

@{
    ViewData[ViewData_Blank.Title] = "Manage Recipe";
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Manage Recipe</h1>
    </div>
    <partial name="_ValidationMessagePartial" model='new _ValidationMessagePartialModel() { WasUpdated = Model.WasUpdated }' />
</div>

<div class="alert alert-secondary">
    <div class="row gy-2">
        @* User must have created the recipe to be able to edit it. *@
        @if (Model.User.Id == Model.Recipe.UserId || Model.User.Features.HasFlag(Features.Admin))
        {
            if (Model.HasUserRecipe)
            {
                <div class="col-lg-6">
                    @await Component.InvokeAsync(ManageRecipeViewComponent.Name, new { Model.User, Model.Recipe, Model.Parameters })
                    @await Component.InvokeAsync(ManageIngredientsViewComponent.Name, new { Model.User, Model.Recipe, Model.Parameters })
                </div>
            }

            <div class="col-lg-6">
                <h6 class="mb-1">Edit Recipe</h6>
                @await Component.InvokeAsync(UpsertRecipeViewComponent.Name, new { Model.User, Model.Recipe })
            </div>
        }
        else
        {
            <div class="col-lg-6">
                @await Component.InvokeAsync(ManageRecipeViewComponent.Name, new { Model.User, Model.Recipe, Model.Parameters })
            </div>

            <div class="col-lg-6">
                @await Component.InvokeAsync(ManageIngredientsViewComponent.Name, new { Model.User, Model.Recipe, Model.Parameters })
            </div>
        }
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" model='new ValidationScriptsPartialViewModel() { IsDemoUser = Model.User.IsDemoUser }' />
}
