@model UserManageRecipeViewModel
@using System.Numerics
@using Core.Models.Recipe
@using Lib.ViewModels.User
@using Lib.ViewModels.Newsletter
@using Core.Consts
@using Web.Components

@{
    ViewData[ViewData_Blank.Title] = "Manage Recipe";
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Manage Recipe</h1>
    </div>
    <div class="col-lg-6 m-0--empty">@if (Model.WasUpdated == false)
    {
        <div class="alert alert-danger alert-dismissible mb-1" role="alert">
            <span>Something went wrong.</span>
            <button type="button" class="btn-close allow-demo" data-dismiss=".alert" aria-label="Close"></button>
        </div>
    }
    else if (Model.WasUpdated == true)
    {
        <div class="alert alert-success alert-dismissible mb-1" role="alert">
            <span>Your preferences have been saved. Changes will be reflected in the next feast.</span>
            <button type="button" class="btn-close allow-demo" data-dismiss=".alert" aria-label="Close"></button>
        </div>
    }</div>
</div>

<div class="alert alert-secondary">
    <div class="row gy-2">
        <div class="col-lg-6">
            @{
                await Html.RenderPartialAsync("_ManageRecipe", Model.RecipeViewModel);
            }
        </div>

        @* User must have created the recipe to be able to edit it. *@
        @if (Model.User.Id == Model.Recipe.UserId || Model.User.Features.HasFlag(Features.Admin))
        {
            <div class="col-lg-6">
                @await Component.InvokeAsync(RecipeViewComponent.Name, new { Model.User, Model.Recipe })
            </div>
        }
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial", new Web.ViewModels.Shared.ValidationScriptsPartialViewModel() { IsDemoUser = Model.User.IsDemoUser });
    }
}
