@model UserEditViewModel
@using System.Numerics
@using Core.Models.Recipe
@using Lib.ViewModels.User
@using Lib.ViewModels.Newsletter
@using Core.Models.User
@using Core.Consts
@using Data.Models.Newsletter
@using Data.Entities.User
@using Web.Code.Extensions

@{
    ViewData[ViewData_Blank.Title] = "Preferences";
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Manage Preferences</h1>
    </div>
    <div class="col-lg-6 m-0--empty">@if (Model.WasUpdated == false || TempData[TempData_User.FailureMessage] != null)
    {
        <div class="alert alert-danger alert-dismissible mb-1" role="alert">
            <span>@(TempData[TempData_User.FailureMessage] ?? "Something went wrong.")</span>
            <button type="button" class="btn-close" data-dismiss=".alert" aria-label="Close"></button>
        </div>
    }
    else if (TempData[TempData_User.WarningMessage] != null)
    {
        <div class="alert alert-warning alert-dismissible mb-1" role="alert">
            <span>@(TempData[TempData_User.WarningMessage] ?? "Something went wrong.")</span>
            <button type="button" class="btn-close" data-dismiss=".alert" aria-label="Close"></button>
        </div>
    }
    else if (Model.WasUpdated == true || TempData[TempData_User.SuccessMessage] != null)
    {
        <div class="alert alert-success alert-dismissible mb-1" role="alert">
            <span>@(TempData[TempData_User.SuccessMessage] ?? "Your preferences have been saved. Changes will be reflected in the next feast.")</span>
            <button type="button" class="btn-close" data-dismiss=".alert" aria-label="Close"></button>
        </div>
    }</div>
</div>

@await Component.InvokeAsync(EditViewComponent.Name, new { Model.User })

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial", new Web.Views.Shared.ValidationScriptsPartialViewModel() { IsDemoUser = Model.User.IsDemoUser }); } 
}
