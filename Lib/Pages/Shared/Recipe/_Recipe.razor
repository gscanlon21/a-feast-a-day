@page "/exercise/exercise"
@inject DisplayHelper DH
@inject IOptions<SiteSettings> SiteSettings
@using Core.Consts;
@using Core.Models.Options
@using Microsoft.Extensions.Options
@using Core.Models.Recipe
@using Core.Models.User
@using Core.Models.Newsletter
@using Core.Dtos.User
@using Core.Dtos.Newsletter

@{ 
    var borderColor = Theme switch
    {
        RecipeTheme.Warmup => "palevioletred",
        RecipeTheme.Main => "mediumpurple",
        RecipeTheme.Cooldown => "lightskyblue",
        RecipeTheme.Extra => "lightgreen",
        RecipeTheme.Other => "lightsalmon",
        _ => "currentColor"
    };

    var backgroundColor = Theme switch
    {
        RecipeTheme.Warmup => "rgba(250,200,200,.1)",
        RecipeTheme.Main => "rgba(250,200,250,.1)",
        RecipeTheme.Cooldown => "rgba(200,200,250,.1)",
        RecipeTheme.Extra => "rgba(200,250,200,.1)",
        RecipeTheme.Other => "rgba(250,200,150,.1)",
        _ => "transparent"
    };
}

@* Use `em` for spacing and font sizes--it's more consistent across fonts/mediums. *@
<div style="flex:1 0 min(calc(100% - 20px), 300px);padding:10px;position:relative;display:flex;flex-direction:column;
            border-bottom:4px solid @borderColor;border-image-slice:1;outline:1px solid @borderColor;background-color:@backgroundColor;">

    <div> @* For margin collapse. *@
        <h3 style="margin-block-start:0;margin-block-end:.4em;font-size:1.2em;line-height:1.2;display:flex;gap:.8ch;">
            <span style="flex:1 1 auto;">
                @if (!string.IsNullOrWhiteSpace(Model.Recipe.Link) && Uri.IsWellFormedUriString(Model.Recipe.Link, UriKind.Absolute))
                {
                    <a class="allow-demo" target="_blank" href="@Model.Recipe.Link">@Model.Recipe.Name</a>
                }
                else
                {
                    <span style="text-decoration:underline;">@Model.Recipe.Name</span>
                }
            </span>

            @if (User != null)
            {
                <a class="allow-demo" style="text-decoration:none;margin:-10px -10px 0 0;padding:10px 8px 0 0;" target="_blank" href="@DH.RecipeLink(User, $"{(int)Model.Section}/{Model.Recipe.Id}")">&#127760;</a>
            }
        </h3>

        @if (Verbosity.HasFlag(Verbosity.Notes))
        {
            if (!string.IsNullOrWhiteSpace(Model.Recipe.Link) && !Uri.IsWellFormedUriString(Model.Recipe.Link, UriKind.Absolute))
            {
                <div style="margin-block:.5em;font-size:x-small;word-break:break-word;">@Model.Recipe.Link</div>
            }
            <div style="margin-block:.5em;font-size:x-small;word-break:break-word;">@Model.Recipe.Notes</div>
        }

        @if (Verbosity.HasFlag(Verbosity.Debug))
        {
            <div style="margin-block:.5em;font-size:x-small;"><b>Section</b>: @Model.Recipe.Section.GetDisplayName()</div>
        }

        @if (Verbosity.HasFlag(Verbosity.PrepTime))
        {
            <div style="margin-block:.5em;font-size:x-small;"><b>Prep time</b>: @Model.Recipe.PrepTime min</div>
        }

        @if (Verbosity.HasFlag(Verbosity.CookTime))
        {
            <div style="margin-block:.5em;font-size:x-small;"><b>Cook time</b>: @Model.Recipe.CookTime min</div>
        }

        @if (Verbosity.HasFlag(Verbosity.TotalTime))
        {
            <div style="margin-block:.5em;font-size:x-small;"><b>Total time</b>: @Model.Recipe.TotalTime min</div>
        }

        @if (Verbosity.HasFlag(Verbosity.Servings))
        {
            <div style="margin-block:.5em;font-size:x-small;"><b>Servings</b>: @Model.Recipe.Servings @Model.Recipe.Measure.GetSingleDisplayName(DisplayType.ShortName)</div>

            @if (Verbosity.HasFlag(Verbosity.Debug))
            {
                <div style="margin-block:.5em;font-size:x-small;"><b>Base Recipe</b>: @Model.Recipe.BaseRecipe</div>
                <div style="margin-block:.5em;font-size:x-small;"><b>Adjustable Servings</b>: @Model.Recipe.AdjustableServings</div>
                <div style="margin-block:.5em;font-size:x-small;"><b>Keep Ingredient Order</b>: @Model.Recipe.KeepIngredientOrder</div>
            }
        }

        @if (Verbosity.HasFlag(Verbosity.Equipment) && (!string.IsNullOrWhiteSpace(Model.Recipe.Equipment) || Verbosity.HasFlag(Verbosity.Debug)))
        {
            <div style="margin-block:.5em;font-size:x-small;"><b>Equipment</b>: @Model.Recipe.Equipment</div>
        }

        <ul style="margin-block:1em;padding-inline-start:2ch;font-size:.85em;">
            @foreach (var ingredient in Model.RecipeIngredients)
            {
                <li style="margin-block:.35em;list-style-type:@(ingredient.Optional ? "circle" : "disc");font-weight:@(ingredient.Type == RecipeIngredientType.IngredientRecipe ? "600" : "normal");@(ingredient.IsUnwantedAndHasAlternatives ? "color:red;" : "")">
                    @(ingredient.Quantity == Fractions.Fraction.Zero ? "" : $"{ingredient.Quantity} ")@(ingredient.Measure.GetSingleDisplayName(DisplayType.ShortName)) @(ingredient.Name)@(string.IsNullOrWhiteSpace(ingredient.Attributes) ? "" : (ingredient.Attributes.StartsWith(',') ? ingredient.Attributes : $" {ingredient.Attributes}"))
                </li>
            }
        </ul>

        <ul style="margin-block:0;padding-inline-start:2ch;font-size:.85em;">
            @foreach (var instruction in Model.Recipe.Instructions.OrderBy(i => i.Order))
            {
                <li style="margin-block:.35em;list-style-type:decimal;">
                    @instruction.Name
                </li>
            }
        </ul>

        @if (!string.IsNullOrWhiteSpace(Model.UserRecipe?.Notes))
        {
            <div style="margin-block:.5em;">
                <small>@Model.UserRecipe.Notes</small>
            </div>
        }
    </div>

    @if (Verbosity.HasFlag(Verbosity.Images))
    {
        var staticSrc = $"{SiteSettings.Value.CdnLink}/static/{Model.Recipe.Image}";
        // If we want to reduce layout shift with aspect-ratio, that really needs to be included on the table with the image because our images don't have consistent aspect ratios. 
        // Setting min-height (200 / (25/14)) gets us close though. 25/14 is, for the most part, our widest aspect-ratio.
        <img style="display:block;height:auto;min-height:112px;max-height:224px;max-width:100%;object-fit:contain;object-position:left top;" loading="lazy" src="@staticSrc">
    }
</div>

@code {
    [CascadingParameter]
    public Core.Dtos.User.UserNewsletterDto? User { get; set; }

    [Parameter, EditorRequired]
    public NewsletterRecipeDto Model { get; set; } = null!;

    [Parameter, EditorRequired]
    public Verbosity Verbosity { get; set; }

    [Parameter, EditorRequired]
    public RecipeTheme Theme { get; init; }
}