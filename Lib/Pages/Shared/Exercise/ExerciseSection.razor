@using Core.Models.Exercise
@using Core.Models.Newsletter;
@using Core.Models.User;

@if (Recipes?.Any() == true)
{
    var titleColor = Theme switch
    {
        ExerciseTheme.Warmup => "palevioletred",
        ExerciseTheme.Main => "mediumpurple",
        ExerciseTheme.Cooldown => "lightskyblue",
        ExerciseTheme.Extra => "lightgreen",
        ExerciseTheme.Other => "lightsalmon",
        _ => "currentColor"
    };

    if (Title == null)
    {
        foreach (var exerciseGroup in Recipes.GroupBy(e => e, new ExerciseSectionComparer()).OrderBy(e => e.Key.Recipe.Name))
        {
            <h2 style="margin-bottom:0;margin-top:1em;color:@titleColor;font-size:revert;">@exerciseGroup.Key.Recipe.Name</h2>

            @if (Verbosity.HasFlag(Verbosity.Debug))
            {
                @if (!string.IsNullOrWhiteSpace(exerciseGroup.Key.Recipe.Notes))
                {
                    <p style="margin-block:0;"><b>Notes</b> - @exerciseGroup.Key.Recipe.Notes</p>
                }
            }

            <div style="margin-top:.2rem;display:flex;flex-flow:row wrap;gap:1ch;line-height:normal;">
                @foreach (var item in exerciseGroup)
                {
                    <CascadingValue Value="User">
                        <_Exercise Model="item" Verbosity="Verbosity" Theme="Theme" />
                    </CascadingValue>
                }
            </div>
        }
    }
    else
    {
        <h2 style="margin-bottom:0;margin-top:1em;color:@titleColor;font-size:revert;">@Title.Header</h2>
        @if (Title.Description.HasValue)
        {
            <h6 style="margin-block:0;font-size:revert;">@Title.Description.Value</h6>
        }
        <div style="margin-top:.2rem;display:flex;flex-flow:row wrap;gap:1ch;line-height:normal;">
            @foreach (var item in Recipes)
            {
                <CascadingValue Value="User">
                    <_Exercise Model="item" Verbosity="Verbosity" Theme="Theme" />
                </CascadingValue>
            }
        </div>
        @if (Title.Footer.HasValue)
        {
            <h6 style="margin-bottom:0;margin-top:.25em;font-weight:normal;font-size:revert;">@Title.Footer.Value</h6>
        }
    }
}

@code {
    [Parameter]
    public Titles? Title { get; init; }

    [Parameter, EditorRequired]
    public ViewModels.User.UserNewsletterViewModel? User { get; init; }

    [Parameter, EditorRequired]
    public ExerciseTheme Theme { get; init; }

    [Parameter, EditorRequired]
    public Verbosity Verbosity { get; init; }

    [Parameter, EditorRequired]
    public IList<ViewModels.Newsletter.NewsletterRecipeViewModel>? Recipes { get; init; }

    public record Titles(MarkupString Header, MarkupString? Description, MarkupString? Footer)
    {
        public Titles(string header) : this(new MarkupString(header), null, null) { }
        public Titles(string header, string description) : this(new MarkupString(header), new MarkupString(description), null) { }
        public Titles(string header, string description, string footer) : this(new MarkupString(header), new MarkupString(description), new MarkupString(footer)) { }
    };

    private class ExerciseSectionComparer : IEqualityComparer<ViewModels.Newsletter.NewsletterRecipeViewModel>
    {
        public bool Equals(ViewModels.Newsletter.NewsletterRecipeViewModel? a, ViewModels.Newsletter.NewsletterRecipeViewModel? b)
            => EqualityComparer<ViewModels.Newsletter.NewsletterRecipeViewModel>.Default.Equals(a, b);

        public int GetHashCode(ViewModels.Newsletter.NewsletterRecipeViewModel e) => e.GetHashCode();
    }
}