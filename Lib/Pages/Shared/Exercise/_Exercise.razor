@page "/exercise/exercise"
@inject DisplayHelper DH
@inject IOptions<SiteSettings> SiteSettings
@using Core.Consts;
@using Lib.ViewModels.Newsletter
@using Core.Models.Options
@using Microsoft.Extensions.Options
@using Core.Models.Exercise
@using Core.Models.User
@using Core.Models.Newsletter

@{ 
    var borderColor = Theme switch
    {
        ExerciseTheme.Warmup => "palevioletred",
        ExerciseTheme.Main => "mediumpurple",
        ExerciseTheme.Cooldown => "lightskyblue",
        ExerciseTheme.Extra => "lightgreen",
        ExerciseTheme.Other => "lightsalmon",
        _ => "currentColor"
    };

    var backgroundColor = Theme switch
    {
        ExerciseTheme.Warmup => "rgba(250,200,200,.1)",
        ExerciseTheme.Main => "rgba(250,200,250,.1)",
        ExerciseTheme.Cooldown => "rgba(200,200,250,.1)",
        ExerciseTheme.Extra => "rgba(200,250,200,.1)",
        ExerciseTheme.Other => "rgba(250,200,150,.1)",
        _ => "transparent"
    };
}

@*
    Use `em` for spacing and font sizes--it's more consistent across fonts/mediums.
*@
<div style="flex:1 0 min(calc(100% - 20px), 300px);padding:10px;position:relative;display:flex;flex-direction:column;justify-content:space-between;
            border-bottom:4px solid @borderColor;border-image-slice:1;outline:1px solid @borderColor;background-color:@backgroundColor;">
    
    @if (User != null)
    {
        @* Check min and max progression ranges so they don't ignore an exercise outside of their progression range. *@
        <small style="position:absolute;right:0;top:0;padding-inline:1ch;writing-mode:vertical-lr;">
            <a class="allow-demo" target="_blank" href="@DH.UserLink(User, $"{Model.Section}/{Model.Id}")">Manage</a>
        </small>
    }
         
    @* div for margin-collapse between text content and image. *@
    <div>
        @* min-height so the Manage link doesn't overlap the image. *@
        <div style="min-height:5ch;">
            @* padding-inline-end so title and instruction text doesn't overlap with the Manage link. *@
            <div style="padding-inline-end:1.1ch">
                <h3 style="margin-block-start:0;margin-block-end:.4em;font-size:1.2em;">
                    <span style="text-decoration:underline;">@(Model.Name)</span>
                </h3>

                @if (Verbosity.HasFlag(Verbosity.PrepTime))
                {
                    <div style="margin-block:.5em;font-size:x-small;"><b>Prep time</b>: @(Model.PrepTime) min</div>
                }

                @if (Verbosity.HasFlag(Verbosity.CookTime))
                {
                    <div style="margin-block:.5em;font-size:x-small;"><b>Cook time</b>: @(Model.CookTime) min</div>
                }

                @if (Verbosity.HasFlag(Verbosity.Servings))
                {
                    <div style="margin-block:.5em;font-size:x-small;"><b>Servings</b>: @Model.Servings</div>
                }

                <ul style="margin-block:0;padding-inline-start:2ch;font-size:.85em;">
                    @foreach (var ingredient in Model.Ingredients)
                    {
                        <li style="margin-block:.35em;list-style-type:disc;">
                            @(ingredient.Quantity == Fractions.Fraction.Zero ? "" : $"{ingredient.Quantity} ")@(ingredient.Measure?.GetSingleDisplayName()) @(ingredient.Name)@(string.IsNullOrWhiteSpace(ingredient.Attributes) ? "" : ingredient.Attributes)
                        </li>
                    }
                </ul>

                <ul style="margin-block:0;padding-inline-start:2ch;font-size:.85em;">
                    @foreach (var instruction in Model.Instructions)
                    {
                        <li style="margin-block:.35em;list-style-type:disc;">
                            @instruction.Name
                        </li>
                    }
                </ul>
            </div>
        </div>

        @*
        @if (Verbosity.HasFlag(Verbosity.Images))
        {
            bool showStaticImage = (User?.ShareMyRecipes == true) || Model.Variation.AnimatedImage == null;
            var staticSrc = $"{SiteSettings.Value.CdnLink}/static/{Model.Variation.StaticImage}";
            var animatedSrc = $"{SiteSettings.Value.CdnLink}/animated/{Model.Variation.AnimatedImage}";
            // If we want to reduce layout shift with aspect-ratio, that really needs to be included on the table with the image because our images don't have consistent aspect ratios. 
            // Setting min-height (200 / (25/14)) gets us close though. 25/14 is, for the most part, our widest aspect-ratio.
            <img style="display:block;margin-top:1ex;height:auto;min-height:112px;max-height:200px;max-width:100%;object-fit:contain;object-position:left top;" loading="lazy" src="@(showStaticImage ? staticSrc : animatedSrc)">
            if (Verbosity.HasFlag(Verbosity.Debug))
            {
                <img style="display:block;margin-top:1ex;height:auto;min-height:112px;max-height:200px;max-width:100%;object-fit:contain;object-position:left top;" loading="lazy" src="@(showStaticImage ? animatedSrc : staticSrc)">
            }
        }
        *@
    </div>
</div>

@code {
    [CascadingParameter]
    public ViewModels.User.UserNewsletterViewModel? User { get; set; }

    [Parameter, EditorRequired]
    public ViewModels.Newsletter.RecipeViewModel Model { get; set; } = null!;

    [Parameter, EditorRequired]
    public Verbosity Verbosity { get; set; }

    [Parameter, EditorRequired]
    public ExerciseTheme Theme { get; init; }
}