@page "/exercise/exercise"
@inject DisplayHelper DH
@inject IOptions<SiteSettings> SiteSettings
@using Core.Consts;
@using Lib.ViewModels.Newsletter
@using Core.Models.Options
@using Microsoft.Extensions.Options
@using Core.Models.Exercise
@using Core.Models.User
@using Core.Models.Newsletter

@{ 
    var borderColor = Model.Section.AsTheme() switch
    {
        ExerciseTheme.Warmup => "palevioletred",
        ExerciseTheme.Main => "mediumpurple",
        ExerciseTheme.Cooldown => "lightskyblue",
        ExerciseTheme.Extra => "lightgreen",
        ExerciseTheme.Other => "lightsalmon",
        _ => "currentColor"
    };

    var backgroundColor = Model.Section.AsTheme() switch
    {
        ExerciseTheme.Warmup => "rgba(250,200,200,.1)",
        ExerciseTheme.Main => "rgba(250,200,250,.1)",
        ExerciseTheme.Cooldown => "rgba(200,200,250,.1)",
        ExerciseTheme.Extra => "rgba(200,250,200,.1)",
        ExerciseTheme.Other => "rgba(250,200,150,.1)",
        _ => "transparent"
    };
}

@*
    Use `em` for spacing and font sizes--it's more consistent across fonts/mediums.
*@
<div style="flex:1 0 @(Verbosity.HasFlag(Verbosity.Debug) ? "250px" : "200px");padding:10px;position:relative;display:flex;flex-direction:column;justify-content:space-between;
            border-bottom:4px @(Verbosity.HasFlag(Verbosity.ProgressionBar) ? "solid" : "none");border-image-slice:1;outline:1px solid @borderColor;background-color:@backgroundColor;
            border-image-source:linear-gradient(90deg, transparent @(Model.Variation.Progression.Min ?? 0)%, @borderColor @(Model.Variation.Progression.Min ?? 0)% @(Model.Variation.Progression.Max ?? 100)%, transparent @(Model.Variation.Progression.Max ?? 100)%);">
    
    @if (User != null)
    {
        @* Check min and max progression ranges so they don't ignore an exercise outside of their progression range. *@
        <small style="position:absolute;right:0;top:0;padding-inline:1ch;writing-mode:vertical-lr;">
            <a class="allow-demo" target="_blank" href="@DH.UserLink(User, $"{Model.Section}/{Model.Exercise.Id}/{Model.Variation.Id}")">Manage</a>
        </small>
    }
         
    @* div for margin-collapse between text content and image. *@
    <div>
        @* min-height so the Manage link doesn't overlap the image. *@
        <div style="min-height:5ch;">
            @* padding-inline-end so title and instruction text doesn't overlap with the Manage link. *@
            <div style="padding-inline-end:1.1ch">
                <h3 style="margin-block-start:0;margin-block-end:.4em;font-size:1.2em;">
                    @if (Model.Variation.UseCaution
                        || (Model.Variation.MobilityJoints & (User?.RehabFocus.As<Joints>() ?? Joints.None)) != 0
                        || (Model.Variation.AllMuscles & (User?.RehabFocus.As<MuscleGroups>() ?? MuscleGroups.None)) != 0)
                    {
                        @:&#9888;
                    }
                    @if (string.IsNullOrWhiteSpace(Model.Variation.DefaultInstruction))
                    {
                        <span style="text-decoration:underline;">@(Model.Variation.Name ?? Model.Exercise.Name)</span>
                    }
                    else
                    {
                        <a class="allow-demo" target="_blank" href="@Model.Variation.DefaultInstruction">
                            @(Model.Variation.Name ?? Model.Exercise.Name)
                        </a>
                    }
                </h3>

                @if (Verbosity.HasFlag(Verbosity.Instructions) && Model.Variation.HasRootInstructions)
                {
                    <ul style="margin-block:0;padding-inline-start:2ch;font-size:.85em;">
                        @foreach (var instruction in Model.Variation.GetRootInstructions(User))
                        {
                            <li style="margin-block:.35em;list-style-type:@(instruction.HasChildInstructions ? "circle" : "disc");">
                                <_Instruction Model="new InstructionViewModel(instruction, User)" />
                                @if (instruction.HasChildInstructions)
                                {
                                    <ul style="margin-block:0;padding-inline-start:2ch;">
                                        @foreach (var childInstruction in instruction.GetChildInstructions(User))
                                        {
                                            <li style="margin-block:.25em;list-style-type:disc;">
                                                <_Instruction Model="new InstructionViewModel(childInstruction, User)" />
                                            </li>
                                        }
                                    </ul>
                                }
                            </li>
                        }
                    </ul>
                }
            </div>

            @if (Verbosity.HasFlag(Verbosity.Proficiency) && Model.Proficiency != null)
            {
                <div style="margin-block:.5em;">
                    <Lib.Pages.Shared.Exercise._Proficiency Model="Model.Proficiency" UserVariation="Model.UserVariation" Variation="Model.Variation" FirstTimeViewing="Model.UserFirstTimeViewing" />
                </div>
            }

            @if (Verbosity.HasFlag(Verbosity.StrengthMuscles) && Model.Variation.StrengthMuscles != MuscleGroups.None)
            {
                <div style="margin-block:.5em;font-size:x-small;"><b>Strength</b>: @Model.Variation.StrengthMuscles.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName)</div>
            }

            @if (Verbosity.HasFlag(Verbosity.SecondaryMuscles) && Model.Variation.SecondaryMuscles != MuscleGroups.None)
            {
                <div style="margin-block:.5em;font-size:x-small;"><b>Secondary</b>: @Model.Variation.SecondaryMuscles.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName)</div>
            }

            @if (Verbosity.HasFlag(Verbosity.StretchMuscles) && Model.Variation.StretchMuscles != MuscleGroups.None)
            {
                <div style="margin-block:.5em;font-size:x-small;"><b>Stretch</b>: @Model.Variation.StretchMuscles.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName)</div>
            }

            @if (Verbosity.HasFlag(Verbosity.Debug))
            {
                <div style="margin-block:.5em;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @MuscleGroups.All.UnsetFlag32(Model.Variation.AllMuscles).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>

                <hr style="margin-block:.5em;" />

                <div style="margin-block:.5em;">
                    <small><b>Joints</b> - @Model.Variation.MobilityJoints.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>

                    <div style="margin-block:0;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @Joints.All.UnsetFlag32(Model.Variation.MobilityJoints).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
                </div>

                <div style="margin-block:.5em;">
                    <small><b>Type</b> - @Model.Variation.ExerciseType.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName)</small>

                    <div style="margin-block:0;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @ExerciseType.All.UnsetFlag32(Model.Variation.ExerciseType).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
                </div>

                <div style="margin-block:.5em;">
                    <small><b>Focus</b> - @Model.Variation.ExerciseFocus.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName)</small>

                    <div style="margin-block:0;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @ExerciseFocus.All.UnsetFlag32(Model.Variation.ExerciseFocus).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
                </div>

                <div style="margin-block:.5em;">
                    <small><b>Sports Focus</b> - @Model.Variation.SportsFocus.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>

                    <div style="margin-block:0;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @Core.Models.User.SportsFocus.All.UnsetFlag32(Model.Variation.SportsFocus).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
                </div>

                <div style="margin-block:.5em;">
                    <small><b>Muscle Contractions</b> - @Model.Variation.MuscleContractions.GetDisplayName32(EnumExtensions.DisplayNameType.GroupName)</small>

                    <div style="margin-block:0;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @MuscleContractions.All.UnsetFlag32(Model.Variation.MuscleContractions).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
                </div>

                <div style="margin-block:.5em;">
                    <small><b>Muscle Movement</b> - @Model.Variation.MuscleMovement.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>

                    <div style="margin-block:0;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @MuscleMovement.All.UnsetFlag32(Model.Variation.MuscleMovement).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
                </div>

                <div style="margin-block:.5em;">
                    <small><b>Movement Pattern</b> - @Model.Variation.MovementPattern.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName, includeAnyMatching: true)</small>

                    <div style="margin-block:0;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @MovementPattern.All.UnsetFlag32(Model.Variation.MovementPattern).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
                </div>

                <div style="margin-block:.5em;">
                    <small><b>Is Weighted</b> - @Model.Variation.IsWeighted</small>
                </div>

                <div style="margin-block:.5em;">
                    <small><b>Is Unilateral</b> - @Model.Variation.Unilateral</small>
                </div>

                <div style="margin-block:.5em;">
                    <small><b>Pause Reps</b> - @Model.Variation.PauseReps</small>
                </div>

                @if (!string.IsNullOrWhiteSpace(Model.Variation.Notes))
                {
                    <div style="margin-block:.5em;">
                        <small><b>V:Notes</b> - @Model.Variation.Notes</small>
                    </div>
                }
            }
        </div>

        @if (Verbosity.HasFlag(Verbosity.Images))
        {
            bool showStaticImage = (User?.ShowStaticImages == true) || Model.Variation.AnimatedImage == null;
            var staticSrc = $"{SiteSettings.Value.CdnLink}/static/{Model.Variation.StaticImage}";
            var animatedSrc = $"{SiteSettings.Value.CdnLink}/animated/{Model.Variation.AnimatedImage}";
            // If we want to reduce layout shift with aspect-ratio, that really needs to be included on the table with the image because our images don't have consistent aspect ratios. 
            // Setting min-height (200 / (25/14)) gets us close though. 25/14 is, for the most part, our widest aspect-ratio.
            <img style="display:block;margin-top:1ex;height:auto;min-height:112px;max-height:200px;max-width:100%;object-fit:contain;object-position:left top;" loading="lazy" src="@(showStaticImage ? staticSrc : animatedSrc)">
            if (Verbosity.HasFlag(Verbosity.Debug))
            {
                <img style="display:block;margin-top:1ex;height:auto;min-height:112px;max-height:200px;max-width:100%;object-fit:contain;object-position:left top;" loading="lazy" src="@(showStaticImage ? animatedSrc : staticSrc)">
            }
        }
    </div>
    
    @* Displays ignored variations or variations missing equipment when the user's progression level is out-of-range for the current variation. *@
    @if (Verbosity.HasFlag(Verbosity.ProgressionBar))
    {
        <div style="margin-top:1ex;display:flex;column-gap:1ch;font-size:smaller;">
            <div>
                @if (Model.EasierReason != null)
                {
                    <div style="white-space:nowrap;">
                        <span style="color:red;">@Model.EasierReason</span>
                    </div>
                    @if (Model.EasierVariation != null)
                    {
                        <div style="font-size:smaller;">@Model.EasierVariation</div>
                    }
                }
            </div>
            <div style="margin-left:auto;text-align:end;">
                @if (Model.HarderReason != null)
                {
                    <div style="white-space:nowrap;">
                        <span style="color:red;">@Model.HarderReason</span>
                    </div>
                    @if (Model.HarderVariation != null)
                    {
                        <div style="font-size:smaller;">@Model.HarderVariation</div>
                    }
                }
            </div>
        </div>
    }

    @* Displays the ▼ for the user's current progression level. *@
    @if (Verbosity.HasFlag(Verbosity.ProgressionBar) && Model.UserExercise != null)
    {
        var progressionOutOfRange = Model.UserExercise.Progression < Model.Variation.Progression.Min || Model.UserExercise.Progression >= Model.Variation.Progression.Max;
        <div style="position:absolute;bottom:0;left:calc(@Model.UserExercise.Progression% - 1ch);width:2ch;text-align:center;font-size:xx-small;line-height:1;@(progressionOutOfRange ? "color:red" : "")">
            &#9660;
        </div>
    }

    @* Displays a vertical bar on the progression range of the exercise's proficiency. *@
    @if (Verbosity.HasFlag(Verbosity.ProgressionBar))
    {
        foreach (var proficiency in Model.ExercisePrerequisites.Select(p => p.Proficiency).Distinct())
        {
            <div style="position:absolute;bottom:-4px;left:calc(@proficiency% - 1px);height:4px;width:2px;background-color:currentColor;"></div>
        }
    }
    
    @* Displays the variation's min and max progression range as numbers. *@
    @if (Verbosity.HasFlag(Verbosity.Debug))
    {
        if (Model.Variation.Progression.Min.HasValue)
        {
            <div style="line-height:1;position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:max(0%, calc(@Model.Variation.Progression.Min% - @(Model.Variation.Progression.Min.Value.ToString().Length)ch));">
                @Model.Variation.Progression.Min
            </div>
        }

        if (Model.Variation.Progression.Max.HasValue)
        {
            <div style="line-height:1;position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:min(calc(100% - @(Model.Variation.Progression.Max.Value.ToString().Length)ch), @Model.Variation.Progression.Max%);">
                @Model.Variation.Progression.Max
            </div>
        }
    }
</div>

@code {
    [CascadingParameter]
    public ViewModels.User.UserNewsletterViewModel? User { get; set; }

    [Parameter, EditorRequired]
    public ViewModels.Newsletter.ExerciseVariationViewModel Model { get; set; } = null!;

    [Parameter, EditorRequired]
    public Verbosity Verbosity { get; set; }
}