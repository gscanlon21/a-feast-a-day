@inject DisplayHelper DH
@using Core.Models.Recipe
@using Core.Models.Newsletter;
@using Core.Models.User;

@if (Ingredients?.Any() == true)
{
   if (Title == null)
   {
        foreach (var recipeGroup in Ingredients.GroupBy(e => e, new IngredientSectionComparer()).OrderBy(e => e.Key.Name))
        {
            <h2 style="margin-bottom:0;margin-top:1em;color:black;font-size:revert;">@recipeGroup.Key.Name</h2>

            @if (!string.IsNullOrWhiteSpace(recipeGroup.Key.Notes))
            {
                <p style="margin-block:0;"><b>Notes</b> - @recipeGroup.Key.Notes</p>
            }

            <div style="margin-top:.2rem;display:flex;flex-flow:row wrap;gap:1ch;line-height:normal;">
                @foreach (var item in recipeGroup)
                {
                    <CascadingValue Value="User">
                        <_Ingredient Model="item" />
                    </CascadingValue>
                }
            </div>
        }
    }
    else
    {
        <h2 style="margin-bottom:0;margin-top:1em;color:black;font-size:revert;">@Title.Header</h2>
        @if (Title.Description.HasValue)
        {
            <h6 style="margin-block:0;font-size:revert;">@Title.Description.Value</h6>
        }
        <div style="margin-top:.2rem;display:flex;flex-flow:row wrap;gap:1ch;line-height:normal;">
            @foreach (var item in Ingredients)
            {
                <CascadingValue Value="User">
                    <_Ingredient Model="item" />
                </CascadingValue>
            }
        </div>
        @if (Title.Footer.HasValue)
        {
            <h6 style="margin-bottom:0;margin-top:.25em;font-weight:normal;font-size:revert;">@Title.Footer.Value</h6>
        }
    }
}

@code {
    [Parameter]
    public Titles? Title { get; init; }

    [Parameter, EditorRequired]
    public Pages.Newsletter.UserNewsletterViewModel? User { get; init; }

    [Parameter, EditorRequired]
    public IList<Pages.Shared.Ingredient.IngredientViewModel>? Ingredients { get; init; }

    public record Titles(MarkupString Header, MarkupString? Description, MarkupString? Footer)
    {
        public Titles(string header) : this(new MarkupString(header), null, null) { }
        public Titles(string header, string description) : this(new MarkupString(header), new MarkupString(description), null) { }
        public Titles(string header, string description, string footer) : this(new MarkupString(header), new MarkupString(description), new MarkupString(footer)) { }
    };

    private class IngredientSectionComparer : IEqualityComparer<Pages.Shared.Ingredient.IngredientViewModel>
    {
        public bool Equals(Pages.Shared.Ingredient.IngredientViewModel? a, Pages.Shared.Ingredient.IngredientViewModel? b)
            => EqualityComparer<Pages.Shared.Ingredient.IngredientViewModel>.Default.Equals(a, b);

        public int GetHashCode(Pages.Shared.Ingredient.IngredientViewModel e) => e.GetHashCode();
    }
}