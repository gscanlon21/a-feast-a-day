@page "/"
@inject AppState AppState
@inject DisplayHelper DH
@inject NewsletterService NewsletterService
@inject NavigationManager Navigation
@using Core.Models.Recipe
@using Core.Models.Newsletter
@using Core.Models.Footnote
@using Core.Models.User
@using Shared.Recipe

@if (Error != null)
{
    <div>@Error</div>
}
else if (Model == null)
{
    <div>Loading...</div>
}
else
{
    var isDebugWorkout = Model.User.Features.HasFlag(Features.Debug);
    <Lib.Pages.Shared.Newsletter._Preview Model='@($"Feasts")' />

    <div style="margin-bottom:1rem;">
        <h6 style="margin-block:0;"><a target="_blank" href="@DH.NewsletterLink(Model.User, Model.Today)">@Model.Today.ToLongDateString()</a></h6>
        <h1 style="margin-block:0;">Weekly Meal Plan</h1>
    </div>

    <Lib.Pages.Shared.Newsletter._UserStatusMessages User="Model.User" />

    <Lib.Pages.Shared.Newsletter.Footnote User="Model.User" Verbosity="Model.Verbosity" Type="Shared.Newsletter.Footnote.FootnoteComponentType.User" Count="Model.User.FootnoteCountTop" />
    
    <div style="margin-block:1rem;">
        <Lib.Pages.Shared.Newsletter.ShoppingList User="Model.User" Verbosity="Model.Verbosity" List="Model.AllRecipes.SelectMany(r => r.Recipe.Ingredients).ToList()" />

        <Lib.Pages.Shared.Recipe.RecipeSection User="Model.User" Verbosity="Model.Verbosity" Recipes="Model.BreakfastRecipes" Theme="RecipeTheme.Warmup" Title="@(new RecipeSection.Titles("Breakfast"))" />
        <Lib.Pages.Shared.Recipe.RecipeSection User="Model.User" Verbosity="Model.Verbosity" Recipes="Model.LunchRecipes" Theme="RecipeTheme.Main" Title="@(new RecipeSection.Titles("Lunch"))" />
        <Lib.Pages.Shared.Recipe.RecipeSection User="Model.User" Verbosity="Model.Verbosity" Recipes="Model.DinnerRecipes" Theme="RecipeTheme.Main" Title="@(new RecipeSection.Titles("Dinner"))" />
        <Lib.Pages.Shared.Recipe.RecipeSection User="Model.User" Verbosity="Model.Verbosity" Recipes="Model.SideRecipes" Theme="RecipeTheme.Cooldown" Title="@(new RecipeSection.Titles("Sides"))" />
        <Lib.Pages.Shared.Recipe.RecipeSection User="Model.User" Verbosity="Model.Verbosity" Recipes="Model.SnackRecipes" Theme="RecipeTheme.Other" Title="@(new RecipeSection.Titles("Snacks"))" />
        <Lib.Pages.Shared.Recipe.RecipeSection User="Model.User" Verbosity="Model.Verbosity" Recipes="Model.DessertRecipes" Theme="RecipeTheme.Other" Title="@(new RecipeSection.Titles("Desserts"))" />
        @if (Model.DebugIngredients.Any())
        {

            <div class="mt-4" style="display:flex;flex-flow:row wrap;gap:1ch;line-height:normal;">
                @foreach (var ingredient in Model.DebugIngredients.OrderBy(e => e.Name))
                {
                    <div style="flex:1 0 min(calc(100% - 20px), 300px);padding:10px;position:relative;display:flex;flex-direction:column;justify-content:space-between;
                        border-bottom:4px solid black;border-image-slice:1;outline:1px solid black;background-color:transparent;">

                        @if (Model.User != null)
                        {
                            @* Check min and max progression ranges so they don't ignore an exercise outside of their progression range. *@
                            <small style="position:absolute;right:0;top:0;padding-inline:1ch;writing-mode:vertical-lr;">
                                <a class="allow-demo" target="_blank" href="@DH.UserLink(Model.User, "/manageingredient")">Manage</a>
                            </small>
                        }

                        @* div for margin-collapse between text content and image. *@
                        <div>
                            @* min-height so the Manage link doesn't overlap the image. *@
                            <div style="min-height:5ch;">
                                @* padding-inline-end so title and instruction text doesn't overlap with the Manage link. *@
                                <div style="padding-inline-end:1.1ch">
                                    <h3 style="margin-block-start:0;margin-block-end:.4em;font-size:1.2em;">
                                        <span style="text-decoration:underline;">@ingredient.Name</span>
                                    </h3>


                                    <div style="margin-block:.5em;font-size:x-small;"><b>Nutrients</b>: @ingredient.Nutrients.GetDisplayName32()</div>
                                    <div style="margin-block:.5em;font-size:x-small;"><b>Allergens</b>: @ingredient.Allergens.GetDisplayName32()</div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

        }
    </div>

    <Lib.Pages.Shared.Newsletter.Footnote User="Model.User" Verbosity="Model.Verbosity" Type="Shared.Newsletter.Footnote.FootnoteComponentType.System" Count="Model.User.FootnoteCountBottom" />

    @if (!Model.HideFooter)
    {
        <hr style="margin-block:1ex;">

        <Lib.Pages.Shared.Newsletter._Footer User="Model.User" />
    }
}

@code {
    [Parameter]
    public ViewModels.Newsletter.NewsletterViewModel? Model { get; set; }

    public string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Model == null)
        {
            Model = await NewsletterService.Newsletter(AppState.Email, AppState.Token, AppState.Date);

            if (Model == null)
            {
                // TODO Differentiate between server blip and user's login token is no longer valid.
                Error = "Request failed.";
            }
        }
    }
}